* Mage App
This is how we want to proceed with the Mage app.
** Learn React + TypeScript
Follow these articles to get a handle on things:
 - https://www.typescriptlang.org/docs/handbook/react-&-webpack.html
 - https://www.typescriptlang.org/docs/handbook/jsx.html (Important for JSX!)
 - https://facebook.github.io/react/docs/rendering-elements.html

The one from typescriptlang.org is important because it shows how to set up things. Most of it is boilerplate.
*** Notes
We have learned the following important stuff so far:
 - Use web-mode + tide to edit TSX files. Use typescript-mode for regular TS files.
 - Typing JSX Elements seems to be stuck with using JSX.Element as the type.
   - Using things like HTMLLIElement don't work, for example.
   - It seems that this is just how it is (se the JSX typescript handbook).
 - A React app should be structured with a single root element (typically called <App />).
 - You can merge interfaces together in TypeScript by declaring it multiple times (sort of like partial classes in C#).
 - Using state updates is pretty easy. State is an object literal (defined by TS interface).
 - When switching between states based on a previous state, use the setState call that accepts a function argument, since state updates might be async.
 - We should maintain strict separation between client and server code, because different types might be in play. Case in point: setInterval returning NodeJS.Timer in Node, but a number in the browser. Installing the node types breaks the browser behavior.
   - https://github.com/TypeStrong/atom-typescript/issues/1053
*** Next steps
Our next steps are:
 - Separate out the ways of handling client and server side stuff. In a "unified app," there should be two directories: one for client and one for server. Not entirely sure I'll need React on the server side. Definitely not, if we use the server as a pure API server.
 - Discover event handling in React.
** Integrate Material UI for React
By using this, we can integrate Material UI features, and prototype what an Android app would look like.

Design the UI first, then hook up the backends.
** Finish thaumaturge
Thaumaturge is to be a separate library that Grimoire depends on (despite being in the same reo).

To finsh thaumaturge we need to do:
 - [X] Create tsconfig.json
 - [X] Leverage dts-bundle to generate a single types file (from all the .d.js files in the dist directory).
 - [-] Make some kind of build task to automate the generation of js files and the type declaration.
   - [X] Make a simple bash script to build the spellcasting lib.
   - [ ] Integrate into a JS build system (Gulpigruntify!!11)
   - [ ] Add the lib as a dependency to client.
 - [ ] Write a simple command line client for it.
 - [X] Tests! (should be pretty straightforward...)
 - [ ] Attempt to import it into client!
 - [X] Move tsconfig.json and webpack.config.js from root to client/ directory. Refactor accordingly.
 - [-] Client:
   - [X] Get some very basic skeleton.
   - [ ] Create stand-alone components (using <Card> maybe) for:
     - [ ] Character sheets.
     - [ ] A single character sheet.
     - [ ] Create new spell definition.
     - [ ] Spellcasting: pick character, spell definition template, then use textboxes etc for changing factors, reach, and mana. Then it shows the dice pool.
     - [ ] Spell list
     - [ ] Edit spell definition (can probably re-use create)
** Create Grimoire Client
Time to react super hard.
*** Character
At the top is the Character Component. It has several event handlers for delegating to the storage to store data.

Top level components are a series of Cards:
 - CoreAttributes: Gnosis, Wisdom, Path, Legacy.
 - CharacterAttributes: Physical, Mental, Social Attributes.
 - {Physical/Mental/Social}Skills: one card per category of Skills.
 - CharacterArcana: the character's ratings in the arcana.

The character attributes and skill cards come later, since they're not immediately necessary for getting a working app. They are necessary for 100% working though.
*** Character List
Add a character list and the ability to create new characters.
 - Move the character "creation" out of Character.tsx.
 - Update character-db to include events that switch characters around. (when switched, emitting update should change the character page).
 - By subscribing to character-db events, every component will know and be able to record the current character info in its state.
*** Spellcasting
Choose a spell you have created. Then you can set stuff like factors, reach, etc, and roll dice to cast.
*** Spell List
Create spells. To begin, you can pick Arcana and Practice (i.e. dots required), and whether or not it's Combined, or Conjunctional.
